{"ast":null,"code":"// import {useState, useEffect} from 'react';\n// import { projectAuth } from '../firebase/config';\n// import { useAuthContext } from './useAuthContext';\n\n// // in the component we are trying to do something\n// // that is trying to logout waiting for backend to\n// // actually logout and then do changes\n// // but if we unmount the component in between the process\n// // then our cleanup function fires\n// // where we set isCancelled as true and we put\n// // consition for changing the state this condition\n// //\n\n// export const useLogin = (email,password) =>{\n\n//     const [isCancelled, setIsCancelled] = useState(false);\n//     const [error,setError] = useState(null);\n//     const [IsPending,setIsPending] = useState(false);\n//     const {dispatch} = useAuthContext();\n\n//     const login = async ()=>{\n//         setError(null);\n//         setIsPending(true);\n\n//     try {\n//         const res =  await projectAuth.signInWithEmailAndPassword(email,password);\n//         // dispatch logout action\n//         dispatch({type:'LOGIN',payload:res.user})\n\n//         if(!isCancelled)\n//         {\n//             setIsPending(false);\n//             setError(null);\n//         }\n\n//     } catch (err) {\n//         if(!isCancelled)\n//         {\n//             console.log(err.message)\n//             setError(err.message);\n//             setIsPending(false);\n//         }\n//     }\n// }\n// useEffect(()=>{\n//     return ()=>{\n//         setIsCancelled(true);\n//     }\n// },[])\n\n//     return {login,error,IsPending}\n// }","map":{"version":3,"names":[],"sources":["/home/bahubali/Code/Projects/Net ninja react/finance-app/src/hooks/useLogin.js"],"sourcesContent":["// import {useState, useEffect} from 'react';\n// import { projectAuth } from '../firebase/config';\n// import { useAuthContext } from './useAuthContext';\n\n// // in the component we are trying to do something\n// // that is trying to logout waiting for backend to\n// // actually logout and then do changes\n// // but if we unmount the component in between the process\n// // then our cleanup function fires\n// // where we set isCancelled as true and we put\n// // consition for changing the state this condition\n// //\n\n\n// export const useLogin = (email,password) =>{\n\n//     const [isCancelled, setIsCancelled] = useState(false);\n//     const [error,setError] = useState(null);\n//     const [IsPending,setIsPending] = useState(false);\n//     const {dispatch} = useAuthContext();\n\n//     const login = async ()=>{\n//         setError(null);\n//         setIsPending(true);\n\n//     try {\n//         const res =  await projectAuth.signInWithEmailAndPassword(email,password);\n//         // dispatch logout action\n//         dispatch({type:'LOGIN',payload:res.user})\n\n//         if(!isCancelled)\n//         {\n//             setIsPending(false);\n//             setError(null);\n//         }\n\n//     } catch (err) {\n//         if(!isCancelled)\n//         {\n//             console.log(err.message)\n//             setError(err.message);\n//             setIsPending(false);\n//         }\n//     }\n// }\n// useEffect(()=>{\n//     return ()=>{\n//         setIsCancelled(true);\n//     }\n// },[])\n\n//     return {login,error,IsPending}\n// }\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module"}